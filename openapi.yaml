openapi: 3.0.3
info:
  title: Limpopo Connect API
  description: The official API for the Limpopo Connect Progressive Web App.
  version: 1.0.0
servers:
  - url: https://{your-function-app-name}.azurewebsites.net/api
    variables:
      your-function-app-name:
        default: limpopo-connect-api
        description: The name of the Azure Function App.
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Error:
      type: object
      properties:
        error:
          type: string
          example: "Error message"
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        name:
          type: string
        role:
          type: string
          enum: [admin, business, resident, visitor]
        is_verified:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    Business:
      type: object
      properties:
        id:
          type: string
          format: uuid
        owner_id:
          type: string
          format: uuid
        name:
          type: string
        category_id:
          type: integer
        description:
          type: string
        address:
          type: string
        lat:
          type: number
          format: double
        lng:
          type: number
          format: double
        phone:
          type: string
        website:
          type: string
          format: uri
        open_hours:
          type: object
        is_verified:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    Event:
      type: object
      properties:
        # ... event properties
    MarketItem:
      type: object
      properties:
        # ... market item properties
    Order:
      type: object
      properties:
        # ... order properties
    # etc. for all models
security:
  - bearerAuth: []

paths:
  /auth/register:
    post:
      summary: Register a new user
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password, name]
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
                name:
                  type: string
      responses:
        '200':
          description: Successful registration
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  accessToken:
                    type: string
                  refreshToken:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'

  /auth/login:
    post:
      summary: Log in a user
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  accessToken:
                    type: string
                  refreshToken:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/refresh:
    post:
      summary: Refresh an access token
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [refreshToken]
              properties:
                refreshToken:
                  type: string
      responses:
        '200':
          description: Tokens refreshed
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                  refreshToken:
                    type: string
        '401':
          $ref: '#/components/responses/Unauthorized'

  /users/me:
    get:
      summary: Get current user profile
      tags: [Users]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /businesses:
    get:
      summary: List businesses
      tags: [Businesses]
      parameters:
        - name: near
          in: query
          description: "Latitude,Longitude,Radius(km) to search within"
          schema:
            type: string
        - name: category
          in: query
          description: "Category slug to filter by"
          schema:
            type: string
        - name: search
          in: query
          description: "Search term"
          schema:
            type: string
      responses:
        '200':
          description: A list of businesses
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Business'
    post:
      summary: Create a new business
      tags: [Businesses]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Business' # Simplified for brevity
      responses:
        '201':
          description: Business created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Business'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /businesses/{id}:
    get:
      summary: Get a business by ID
      tags: [Businesses]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: A single business
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Business'
        '404':
          $ref: '#/components/responses/NotFound'
    patch:
      summary: Update a business
      tags: [Businesses]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Business' # Simplified
      responses:
        '200':
          description: Business updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Business'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Delete a business
      tags: [Businesses]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Business deleted
        '404':
          $ref: '#/components/responses/NotFound'

  /uploads/get-signed-url:
    post:
      summary: Get a signed URL for blob upload
      tags: [Uploads]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                fileName:
                  type: string
                contentType:
                  type: string
      responses:
        '200':
          description: Signed URL created
          content:
            application/json:
              schema:
                type: object
                properties:
                  uploadUrl:
                    type: string
                    format: uri
                  blobPath:
                    type: string

  /search:
    get:
      summary: Global search
      tags: [Search]
      parameters:
        - name: q
          in: query
          required: true
          schema:
            type: string
        - name: types
          in: query
          description: "Comma-separated list of types (business, event, market_item)"
          schema:
            type: string
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object # Define SearchResult schema
  /events:
    get:
      summary: List events
      tags: [Events]
      # ... parameters ...
      responses:
        '200':
          description: A list of events
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
    post:
      summary: Create an event
      tags: [Events]
      security:
        - bearerAuth: []
      # ... requestBody ...
      responses:
        '201':
          description: Event created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
  /events/{id}:
    get:
      summary: Get an event by ID
      tags: [Events]
      # ... parameters ...
      responses:
        '200':
          description: A single event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
  /events/{id}/register:
    post:
      summary: Register for an event
      tags: [Events]
      security:
        - bearerAuth: []
      # ... parameters ...
      responses:
        '201':
          description: Successfully registered for event
  /market/items:
    get:
      summary: List market items
      tags: [Marketplace]
      responses:
        '200':
          description: A list of market items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MarketItem'
  /orders:
    post:
      summary: Create an order
      tags: [Marketplace]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                items:
                  type: array
                  items:
                    type: object
                    properties:
                      itemId:
                        type: string
                        format: uuid
                      qty:
                        type: integer
                shippingAddress:
                  type: object
      responses:
        '201':
          description: Order created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
  /orders/{id}/pay:
    post:
      summary: "Pay for an order (stubbed)"
      tags: [Marketplace]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Payment successful

components:
  responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Conflict:
      description: Conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'