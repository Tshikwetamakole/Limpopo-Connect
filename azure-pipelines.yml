# Azure Pipeline for Limpopo Connect API

trigger:
  branches:
    include:
      - main
      - backend/infra
  paths:
    include:
      - limpopo-api/*
      - infra/*
      - azure-pipelines.yml

pool:
  vmImage: 'ubuntu-latest'

variables:
  - group: LimpopoConnect-Prod # Variable group in Azure DevOps to store secrets
  - name: WORKING_DIRECTORY
    value: 'limpopo-api'
  - name: INFRA_DIRECTORY
    value: 'infra'
  - name: RESOURCE_GROUP_NAME
    value: 'limpopo-connect-rg'
  - name: LOCATION
    value: 'westeurope'
  - name: BASE_NAME
    value: 'limpopo-$(Build.BuildId)'

stages:
- stage: Build
  displayName: 'Build and Test'
  jobs:
  - job: BuildJob
    displayName: 'Build API and Package'
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '18.x'
      displayName: 'Install Node.js'

    - script: |
        npm install
        npm run build
      displayName: 'Install Dependencies and Build'
      workingDirectory: $(WORKING_DIRECTORY)

    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '$(WORKING_DIRECTORY)'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
        replaceExistingArchive: true
        verbose: true
      displayName: 'Archive API files'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
      displayName: 'Publish Artifacts'

- stage: Deploy
  displayName: 'Deploy Infrastructure and Application'
  dependsOn: Build
  jobs:
  - deployment: DeployJob
    displayName: 'Deploy to Azure'
    environment: 'production'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureCLI@2
            displayName: 'Deploy Bicep Infrastructure'
            inputs:
              azureSubscription: 'your-azure-subscription' # Service Connection Name
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                az group create --name $(RESOURCE_GROUP_NAME) --location $(LOCATION)
                az deployment group create \
                  --resource-group $(RESOURCE_GROUP_NAME) \
                  --template-file $(INFRA_DIRECTORY)/main.bicep \
                  --parameters baseName=$(BASE_NAME) \
                  --parameters postgresAdmin=$(POSTGRES_ADMIN_USER) \
                  --parameters postgresAdminPassword=$(POSTGRES_ADMIN_PASSWORD)

          - task: AzureCLI@2
            displayName: 'Run DB Migrations'
            inputs:
              azureSubscription: 'your-azure-subscription' # Service Connection Name
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Install psql
                sudo apt-get update
                sudo apt-get install -y postgresql-client

                # Get DB connection string from Key Vault or output of previous step
                PG_CONN_STRING=$(az functionapp config appsettings list -g $(RESOURCE_GROUP_NAME) -n $(BASE_NAME)-api --query "[?name=='DATABASE_URL'].value" -o tsv)

                echo "Running database migrations..."
                psql "$PG_CONN_STRING" -f $(WORKING_DIRECTORY)/migrations/002_extensions.sql
                psql "$PG_CONN_STRING" -f $(WORKING_DIRECTORY)/migrations/001_init_schema.sql
                psql "$PG_CONN_STRING" -f $(WORKING_DIRECTORY)/seeds/sample_data.sql

          - task: AzureFunctionApp@1
            displayName: 'Deploy Azure Function App'
            inputs:
              azureSubscription: 'your-azure-subscription' # Service Connection Name
              appType: 'functionApp'
              appName: '$(BASE_NAME)-api'
              package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'
              deploymentMethod: 'zipDeploy'