name: CI/CD Pipeline (optional axe)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  BUILD_DIR: dist

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Test (matrix)
    runs-on: ubuntu-latest
    timeout-minutes: 30

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Lint (if present)
        run: npm run lint --if-present

      - name: Typecheck (if present)
        run: npm run typecheck --if-present

      - name: Build (if present)
        run: npm run build --if-present

      - name: Run tests (if present)
        run: npm test --if-present -- --coverage

  accessibility:
    name: Accessibility checks (axe) — optional
    runs-on: ubuntu-latest
    needs: test
    # Mark this job as non-blocking: it may fail but won't stop deploy because:
    # 1) continue-on-error: true prevents the workflow from failing on this job
    # 2) deploy does NOT need accessibility (deploy only needs test)
    continue-on-error: true
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build (if present)
        run: npm run build --if-present

      - name: Install wait-on locally and jq (for JSON parsing)
        run: |
          npm i --no-audit --no-fund wait-on --no-save
          sudo apt-get update -y
          sudo apt-get install -y jq

      - name: Start server, wait and run axe (non-blocking)
        run: |
          echo "Starting http-server from ./${{ env.BUILD_DIR }} on port 8080"
          npx http-server ./${{ env.BUILD_DIR }} -p 8080 -c-1 >/tmp/http-server.log 2>&1 &
          SERVER_PID=$!
          echo "http-server PID: $SERVER_PID"
          echo "Waiting for server to be available on http://localhost:8080 ..."
          npx wait-on http://localhost:8080
          echo "Running @axe-core/cli (results saved to axe-results.json) — this is optional"
          # Run axe and save results as JSON. Do not fail this step directly (we'll handle exit logic).
          npx @axe-core/cli http://localhost:8080 --save=axe-results.json || true
          echo "Axe output (trimmed):"
          if [ -f axe-results.json ]; then
            jq '.violations | .[] | {id: .id, impact: .impact, help: .help, nodes: (.nodes | length)}' axe-results.json | head -n 200 || true
            VIOLATIONS_COUNT=$(jq '.violations | length' axe-results.json)
            echo "Accessibility violations: $VIOLATIONS_COUNT"
            if [ "$VIOLATIONS_COUNT" -gt 0 ]; then
              echo "::warning::Found $VIOLATIONS_COUNT accessibility violations. See axe-results.json for details."
              # DO NOT exit with non-zero here — this job is optional. We still produce artifacts
            else
              echo "No accessibility violations found."
            fi
          else
            echo "::warning::axe-results.json not produced — axe may have errored."
          fi
          # Save results into workspace for later inspection (artifact upload will run even if job "fails" later)
          ls -la
      - name: Upload axe results (optional artifact)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: axe-results
          path: |
            axe-results.json
            /tmp/http-server.log

  deploy:
    name: Deploy to Vercel
    runs-on: ubuntu-latest
    needs: test                 # Important: deploy needs only 'test', not 'accessibility'
    if: github.ref == 'refs/heads/main'
    timeout-minutes: 20
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build (if present)
        run: npm run build --if-present

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          vercel-args: '--prod'
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: .
